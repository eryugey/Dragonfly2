//
//     Copyright 2022 The Dragonfly Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: pkg/rpc/dfproxy/dfproxy.proto

package dfproxy

import (
	context "context"
	base "d7y.io/dragonfly/v2/pkg/rpc/base"
	dfdaemon "d7y.io/dragonfly/v2/pkg/rpc/dfdaemon"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReqType int32

const (
	ReqType_HeartBeat  ReqType = 0
	ReqType_StatTask   ReqType = 1
	ReqType_ImportTask ReqType = 2
	ReqType_ExportTask ReqType = 3
	ReqType_DeleteTask ReqType = 4
)

// Enum value maps for ReqType.
var (
	ReqType_name = map[int32]string{
		0: "HeartBeat",
		1: "StatTask",
		2: "ImportTask",
		3: "ExportTask",
		4: "DeleteTask",
	}
	ReqType_value = map[string]int32{
		"HeartBeat":  0,
		"StatTask":   1,
		"ImportTask": 2,
		"ExportTask": 3,
		"DeleteTask": 4,
	}
)

func (x ReqType) Enum() *ReqType {
	p := new(ReqType)
	*p = x
	return p
}

func (x ReqType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReqType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_rpc_dfproxy_dfproxy_proto_enumTypes[0].Descriptor()
}

func (ReqType) Type() protoreflect.EnumType {
	return &file_pkg_rpc_dfproxy_dfproxy_proto_enumTypes[0]
}

func (x ReqType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReqType.Descriptor instead.
func (ReqType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_rpc_dfproxy_dfproxy_proto_rawDescGZIP(), []int{0}
}

type DfCacheReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatTask   *dfdaemon.StatTaskRequest   `protobuf:"bytes,1,opt,name=stat_task,json=statTask,proto3" json:"stat_task,omitempty"`
	ImportTask *dfdaemon.ImportTaskRequest `protobuf:"bytes,2,opt,name=import_task,json=importTask,proto3" json:"import_task,omitempty"`
	ExportTask *dfdaemon.ExportTaskRequest `protobuf:"bytes,3,opt,name=export_task,json=exportTask,proto3" json:"export_task,omitempty"`
	DeleteTask *dfdaemon.DeleteTaskRequest `protobuf:"bytes,4,opt,name=delete_task,json=deleteTask,proto3" json:"delete_task,omitempty"`
}

func (x *DfCacheReq) Reset() {
	*x = DfCacheReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_dfproxy_dfproxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DfCacheReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DfCacheReq) ProtoMessage() {}

func (x *DfCacheReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dfproxy_dfproxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DfCacheReq.ProtoReflect.Descriptor instead.
func (*DfCacheReq) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dfproxy_dfproxy_proto_rawDescGZIP(), []int{0}
}

func (x *DfCacheReq) GetStatTask() *dfdaemon.StatTaskRequest {
	if x != nil {
		return x.StatTask
	}
	return nil
}

func (x *DfCacheReq) GetImportTask() *dfdaemon.ImportTaskRequest {
	if x != nil {
		return x.ImportTask
	}
	return nil
}

func (x *DfCacheReq) GetExportTask() *dfdaemon.ExportTaskRequest {
	if x != nil {
		return x.ExportTask
	}
	return nil
}

func (x *DfCacheReq) GetDeleteTask() *dfdaemon.DeleteTaskRequest {
	if x != nil {
		return x.DeleteTask
	}
	return nil
}

type ProxyClientPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   ReqType           `protobuf:"varint,1,opt,name=type,proto3,enum=dfproxy.ReqType" json:"type,omitempty"`
	Result *base.GrpcDfError `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ProxyClientPacket) Reset() {
	*x = ProxyClientPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_dfproxy_dfproxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyClientPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyClientPacket) ProtoMessage() {}

func (x *ProxyClientPacket) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dfproxy_dfproxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyClientPacket.ProtoReflect.Descriptor instead.
func (*ProxyClientPacket) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dfproxy_dfproxy_proto_rawDescGZIP(), []int{1}
}

func (x *ProxyClientPacket) GetType() ReqType {
	if x != nil {
		return x.Type
	}
	return ReqType_HeartBeat
}

func (x *ProxyClientPacket) GetResult() *base.GrpcDfError {
	if x != nil {
		return x.Result
	}
	return nil
}

type ProxyServerPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     ReqType     `protobuf:"varint,1,opt,name=type,proto3,enum=dfproxy.ReqType" json:"type,omitempty"`
	CacheReq *DfCacheReq `protobuf:"bytes,2,opt,name=cache_req,json=cacheReq,proto3" json:"cache_req,omitempty"`
}

func (x *ProxyServerPacket) Reset() {
	*x = ProxyServerPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_dfproxy_dfproxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyServerPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyServerPacket) ProtoMessage() {}

func (x *ProxyServerPacket) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dfproxy_dfproxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyServerPacket.ProtoReflect.Descriptor instead.
func (*ProxyServerPacket) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dfproxy_dfproxy_proto_rawDescGZIP(), []int{2}
}

func (x *ProxyServerPacket) GetType() ReqType {
	if x != nil {
		return x.Type
	}
	return ReqType_HeartBeat
}

func (x *ProxyServerPacket) GetCacheReq() *DfCacheReq {
	if x != nil {
		return x.CacheReq
	}
	return nil
}

var File_pkg_rpc_dfproxy_dfproxy_proto protoreflect.FileDescriptor

var file_pkg_rpc_dfproxy_dfproxy_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x66, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2f, 0x64, 0x66, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x64, 0x66, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x1a, 0x17, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70,
	0x63, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x66, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x66, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfe, 0x01, 0x0a, 0x0a, 0x44, 0x66, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x66, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x64, 0x66, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x66, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x66, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x22, 0x64, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x64, 0x66, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x44, 0x66, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6b, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x24,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x64,
	0x66, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x66, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x44, 0x66, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x2a, 0x56, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x04, 0x32, 0x53,
	0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x4a, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x2e, 0x64, 0x66, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x66, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x25, 0x5a, 0x23, 0x64, 0x37, 0x79, 0x2e, 0x69, 0x6f, 0x2f, 0x64, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x66, 0x6c, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x64, 0x66, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pkg_rpc_dfproxy_dfproxy_proto_rawDescOnce sync.Once
	file_pkg_rpc_dfproxy_dfproxy_proto_rawDescData = file_pkg_rpc_dfproxy_dfproxy_proto_rawDesc
)

func file_pkg_rpc_dfproxy_dfproxy_proto_rawDescGZIP() []byte {
	file_pkg_rpc_dfproxy_dfproxy_proto_rawDescOnce.Do(func() {
		file_pkg_rpc_dfproxy_dfproxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_rpc_dfproxy_dfproxy_proto_rawDescData)
	})
	return file_pkg_rpc_dfproxy_dfproxy_proto_rawDescData
}

var file_pkg_rpc_dfproxy_dfproxy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_rpc_dfproxy_dfproxy_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pkg_rpc_dfproxy_dfproxy_proto_goTypes = []interface{}{
	(ReqType)(0),                       // 0: dfproxy.ReqType
	(*DfCacheReq)(nil),                 // 1: dfproxy.DfCacheReq
	(*ProxyClientPacket)(nil),          // 2: dfproxy.ProxyClientPacket
	(*ProxyServerPacket)(nil),          // 3: dfproxy.ProxyServerPacket
	(*dfdaemon.StatTaskRequest)(nil),   // 4: dfdaemon.StatTaskRequest
	(*dfdaemon.ImportTaskRequest)(nil), // 5: dfdaemon.ImportTaskRequest
	(*dfdaemon.ExportTaskRequest)(nil), // 6: dfdaemon.ExportTaskRequest
	(*dfdaemon.DeleteTaskRequest)(nil), // 7: dfdaemon.DeleteTaskRequest
	(*base.GrpcDfError)(nil),           // 8: base.GrpcDfError
}
var file_pkg_rpc_dfproxy_dfproxy_proto_depIdxs = []int32{
	4, // 0: dfproxy.DfCacheReq.stat_task:type_name -> dfdaemon.StatTaskRequest
	5, // 1: dfproxy.DfCacheReq.import_task:type_name -> dfdaemon.ImportTaskRequest
	6, // 2: dfproxy.DfCacheReq.export_task:type_name -> dfdaemon.ExportTaskRequest
	7, // 3: dfproxy.DfCacheReq.delete_task:type_name -> dfdaemon.DeleteTaskRequest
	0, // 4: dfproxy.ProxyClientPacket.type:type_name -> dfproxy.ReqType
	8, // 5: dfproxy.ProxyClientPacket.result:type_name -> base.GrpcDfError
	0, // 6: dfproxy.ProxyServerPacket.type:type_name -> dfproxy.ReqType
	1, // 7: dfproxy.ProxyServerPacket.cache_req:type_name -> dfproxy.DfCacheReq
	2, // 8: dfproxy.Proxy.ProxyService:input_type -> dfproxy.ProxyClientPacket
	3, // 9: dfproxy.Proxy.ProxyService:output_type -> dfproxy.ProxyServerPacket
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_pkg_rpc_dfproxy_dfproxy_proto_init() }
func file_pkg_rpc_dfproxy_dfproxy_proto_init() {
	if File_pkg_rpc_dfproxy_dfproxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_rpc_dfproxy_dfproxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DfCacheReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_dfproxy_dfproxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyClientPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_dfproxy_dfproxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyServerPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_rpc_dfproxy_dfproxy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_rpc_dfproxy_dfproxy_proto_goTypes,
		DependencyIndexes: file_pkg_rpc_dfproxy_dfproxy_proto_depIdxs,
		EnumInfos:         file_pkg_rpc_dfproxy_dfproxy_proto_enumTypes,
		MessageInfos:      file_pkg_rpc_dfproxy_dfproxy_proto_msgTypes,
	}.Build()
	File_pkg_rpc_dfproxy_dfproxy_proto = out.File
	file_pkg_rpc_dfproxy_dfproxy_proto_rawDesc = nil
	file_pkg_rpc_dfproxy_dfproxy_proto_goTypes = nil
	file_pkg_rpc_dfproxy_dfproxy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProxyClient is the client API for Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProxyClient interface {
	// Proxy service
	ProxyService(ctx context.Context, opts ...grpc.CallOption) (Proxy_ProxyServiceClient, error)
}

type proxyClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyClient(cc grpc.ClientConnInterface) ProxyClient {
	return &proxyClient{cc}
}

func (c *proxyClient) ProxyService(ctx context.Context, opts ...grpc.CallOption) (Proxy_ProxyServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Proxy_serviceDesc.Streams[0], "/dfproxy.Proxy/ProxyService", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyProxyServiceClient{stream}
	return x, nil
}

type Proxy_ProxyServiceClient interface {
	Send(*ProxyClientPacket) error
	Recv() (*ProxyServerPacket, error)
	grpc.ClientStream
}

type proxyProxyServiceClient struct {
	grpc.ClientStream
}

func (x *proxyProxyServiceClient) Send(m *ProxyClientPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyProxyServiceClient) Recv() (*ProxyServerPacket, error) {
	m := new(ProxyServerPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyServer is the server API for Proxy service.
type ProxyServer interface {
	// Proxy service
	ProxyService(Proxy_ProxyServiceServer) error
}

// UnimplementedProxyServer can be embedded to have forward compatible implementations.
type UnimplementedProxyServer struct {
}

func (*UnimplementedProxyServer) ProxyService(Proxy_ProxyServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method ProxyService not implemented")
}

func RegisterProxyServer(s *grpc.Server, srv ProxyServer) {
	s.RegisterService(&_Proxy_serviceDesc, srv)
}

func _Proxy_ProxyService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServer).ProxyService(&proxyProxyServiceServer{stream})
}

type Proxy_ProxyServiceServer interface {
	Send(*ProxyServerPacket) error
	Recv() (*ProxyClientPacket, error)
	grpc.ServerStream
}

type proxyProxyServiceServer struct {
	grpc.ServerStream
}

func (x *proxyProxyServiceServer) Send(m *ProxyServerPacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyProxyServiceServer) Recv() (*ProxyClientPacket, error) {
	m := new(ProxyClientPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Proxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfproxy.Proxy",
	HandlerType: (*ProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProxyService",
			Handler:       _Proxy_ProxyService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/rpc/dfproxy/dfproxy.proto",
}
