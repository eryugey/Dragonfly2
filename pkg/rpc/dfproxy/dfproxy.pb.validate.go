// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/rpc/dfproxy/dfproxy.proto

package dfproxy

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on DfCacheReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DfCacheReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStatTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DfCacheReqValidationError{
				field:  "StatTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetImportTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DfCacheReqValidationError{
				field:  "ImportTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExportTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DfCacheReqValidationError{
				field:  "ExportTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeleteTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DfCacheReqValidationError{
				field:  "DeleteTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DfCacheReqValidationError is the validation error returned by
// DfCacheReq.Validate if the designated constraints aren't met.
type DfCacheReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DfCacheReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DfCacheReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DfCacheReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DfCacheReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DfCacheReqValidationError) ErrorName() string { return "DfCacheReqValidationError" }

// Error satisfies the builtin error interface
func (e DfCacheReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDfCacheReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DfCacheReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DfCacheReqValidationError{}

// Validate checks the field values on ProxyClientPacket with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProxyClientPacket) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProxyClientPacketValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProxyClientPacketValidationError is the validation error returned by
// ProxyClientPacket.Validate if the designated constraints aren't met.
type ProxyClientPacketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxyClientPacketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxyClientPacketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxyClientPacketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxyClientPacketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxyClientPacketValidationError) ErrorName() string {
	return "ProxyClientPacketValidationError"
}

// Error satisfies the builtin error interface
func (e ProxyClientPacketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxyClientPacket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxyClientPacketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxyClientPacketValidationError{}

// Validate checks the field values on ProxyServerPacket with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProxyServerPacket) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetCacheReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProxyServerPacketValidationError{
				field:  "CacheReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProxyServerPacketValidationError is the validation error returned by
// ProxyServerPacket.Validate if the designated constraints aren't met.
type ProxyServerPacketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxyServerPacketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxyServerPacketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxyServerPacketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxyServerPacketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxyServerPacketValidationError) ErrorName() string {
	return "ProxyServerPacketValidationError"
}

// Error satisfies the builtin error interface
func (e ProxyServerPacketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxyServerPacket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxyServerPacketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxyServerPacketValidationError{}
