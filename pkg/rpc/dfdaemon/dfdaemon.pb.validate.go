// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/rpc/dfdaemon/dfdaemon.proto

package dfdaemon

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// define the regex for a UUID once up-front
var _dfdaemon_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DownRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DownRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetUuid()); err != nil {
		return DownRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		return DownRequestValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return DownRequestValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
	}

	if utf8.RuneCountInString(m.GetOutput()) < 1 {
		return DownRequestValidationError{
			field:  "Output",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetTimeout() < 0 {
		return DownRequestValidationError{
			field:  "Timeout",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetLimit() < 0 {
		return DownRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 0",
		}
	}

	// no validation rules for DisableBackSource

	if v, ok := interface{}(m.GetUrlMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DownRequestValidationError{
				field:  "UrlMeta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPattern() != "" {

		if _, ok := _DownRequest_Pattern_InLookup[m.GetPattern()]; !ok {
			return DownRequestValidationError{
				field:  "Pattern",
				reason: "value must be in list [p2p cdn source]",
			}
		}

	}

	// no validation rules for Callsystem

	// no validation rules for Uid

	// no validation rules for Gid

	return nil
}

func (m *DownRequest) _validateUuid(uuid string) error {
	if matched := _dfdaemon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DownRequestValidationError is the validation error returned by
// DownRequest.Validate if the designated constraints aren't met.
type DownRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownRequestValidationError) ErrorName() string { return "DownRequestValidationError" }

// Error satisfies the builtin error interface
func (e DownRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownRequestValidationError{}

var _DownRequest_Pattern_InLookup = map[string]struct{}{
	"p2p":    {},
	"cdn":    {},
	"source": {},
}

// Validate checks the field values on DownResult with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DownResult) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetTaskId()) < 1 {
		return DownResultValidationError{
			field:  "TaskId",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPeerId()) < 1 {
		return DownResultValidationError{
			field:  "PeerId",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetCompletedLength() < 0 {
		return DownResultValidationError{
			field:  "CompletedLength",
			reason: "value must be greater than or equal to 0",
		}
	}

	// no validation rules for Done

	return nil
}

// DownResultValidationError is the validation error returned by
// DownResult.Validate if the designated constraints aren't met.
type DownResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownResultValidationError) ErrorName() string { return "DownResultValidationError" }

// Error satisfies the builtin error interface
func (e DownResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownResultValidationError{}

// Validate checks the field values on StatFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StatFileRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetTaskId()) < 1 {
		return StatFileRequestValidationError{
			field:  "TaskId",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// StatFileRequestValidationError is the validation error returned by
// StatFileRequest.Validate if the designated constraints aren't met.
type StatFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatFileRequestValidationError) ErrorName() string { return "StatFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e StatFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatFileRequestValidationError{}

// Validate checks the field values on StatFileResult with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StatFileResult) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetPath()) < 1 {
		return StatFileResultValidationError{
			field:  "Path",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// StatFileResultValidationError is the validation error returned by
// StatFileResult.Validate if the designated constraints aren't met.
type StatFileResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatFileResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatFileResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatFileResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatFileResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatFileResultValidationError) ErrorName() string { return "StatFileResultValidationError" }

// Error satisfies the builtin error interface
func (e StatFileResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatFileResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatFileResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatFileResultValidationError{}

// Validate checks the field values on RegisterFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterFileRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetPath()) < 1 {
		return RegisterFileRequestValidationError{
			field:  "Path",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// RegisterFileRequestValidationError is the validation error returned by
// RegisterFileRequest.Validate if the designated constraints aren't met.
type RegisterFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterFileRequestValidationError) ErrorName() string {
	return "RegisterFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterFileRequestValidationError{}
